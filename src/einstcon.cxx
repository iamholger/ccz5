#include <cmath>
#include <iostream>


void enforce(double * luh)
{
    double g_cov[3][3] = { {luh[0], luh[1], luh[2]}, {luh[1], luh[3], luh[4]}, {luh[2], luh[4], luh[5]} };
    const double det = luh[0]*luh[3]*luh[5] - luh[0]*luh[4]*luh[4] - luh[1]*luh[1]*luh[5] + 2*luh[1]*luh[2]*luh[4] -luh[2]*luh[2]*luh[3];

    const double phisq = 1./std::cbrt(det);
    for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++) g_cov[i][j] *= phisq;

    const double det2 = g_cov[0][0]*g_cov[1][1]*g_cov[2][2] -
        g_cov[0][0]*g_cov[1][2]*g_cov[2][1] - g_cov[1][0]*g_cov[0][1]*g_cov[2][2] +
        g_cov[1][0]*g_cov[0][2]*g_cov[2][1] + g_cov[2][0]*g_cov[0][1]*g_cov[1][2] -
        g_cov[2][0]*g_cov[0][2]*g_cov[1][1];

    const double invdet = 1./det2;
    const double g_contr[3][3] = {
        { ( g_cov[1][1]*g_cov[2][2]-g_cov[1][2]*g_cov[2][1])*invdet, -(g_cov[0][1]*g_cov[2][2]-g_cov[0][2]*g_cov[2][1])*invdet, -(-g_cov[0][1]*g_cov[1][2]+g_cov[0][2]*g_cov[1][1])*invdet},
        {-( g_cov[1][0]*g_cov[2][2]-g_cov[1][2]*g_cov[2][0])*invdet,  (g_cov[0][0]*g_cov[2][2]-g_cov[0][2]*g_cov[2][0])*invdet, -( g_cov[0][0]*g_cov[1][2]-g_cov[0][2]*g_cov[1][0])*invdet},
        {-(-g_cov[1][0]*g_cov[2][1]+g_cov[1][1]*g_cov[2][0])*invdet, -(g_cov[0][0]*g_cov[2][1]-g_cov[0][1]*g_cov[2][0])*invdet,  ( g_cov[0][0]*g_cov[1][1]-g_cov[0][1]*g_cov[1][0])*invdet}
    };
    double Aex[3][3] = { {luh[6], luh[7], luh[8]}, {luh[7], luh[9], luh[10]}, {luh[8], luh[10], luh[11]} };

    double traceA = 0;
    for (int i=0;i<3;i++)
    for (int j=0;j<3;j++) traceA += g_contr[i][j]*Aex[i][j];

    for (int i=0;i<3;i++)
    for (int j=0;j<3;j++) Aex[i][j] -= 1./3. * traceA * g_cov[i][j];
            
    luh[ 0] = g_cov[0][0];
    luh[ 1] = g_cov[0][1];
    luh[ 2] = g_cov[0][2];
    luh[ 3] = g_cov[1][1];
    luh[ 4] = g_cov[1][2];
    luh[ 5] = g_cov[2][2];
    luh[ 6] =   Aex[0][0];
    luh[ 7] =   Aex[0][1];
    luh[ 8] =   Aex[0][2];
    luh[ 9] =   Aex[1][1];
    luh[10] =   Aex[1][2];
    luh[11] =   Aex[2][2];            
    //
    // As suggested by our PRD referee, we also enforce the algebraic constraint that results from the first spatial derivative of the constraint
    // det \tilde{\gamma}_ij = 0, which leads to
    //
    // \tilde{\gamma}^{ij} D_kij = 0
    //
    // and is thus a condition of trace-freeness on all submatrices D_kij for k=1,2,3.
    //

    double DD[3][3][3] = { 
        {{luh[35], luh[36], luh[37]}, {luh[36], luh[38], luh[39]}, {luh[37], luh[39], luh[40]}},
        {{luh[41], luh[42], luh[43]}, {luh[42], luh[44], luh[45]}, {luh[43], luh[45], luh[46]}},
        {{luh[47], luh[48], luh[49]}, {luh[48], luh[50], luh[51]}, {luh[49], luh[51], luh[52]}}
    };

    for (int l=0;l<3;l++)
    {
        double traceDk = 0;
        for (int i=0;i<3;i++)
        for (int j=0;j<3;j++) traceDk += g_contr[i][j]*DD[l][i][j];
        
        for (int i=0;i<3;i++)
        for (int j=0;j<3;j++) DD[l][i][j] -= 1./3 * g_cov[i][j]*traceDk;
    }
    
    luh[35] = DD[0][0][0];
    luh[36] = DD[0][0][1];
    luh[37] = DD[0][0][2];
    luh[38] = DD[0][2][1];
    luh[39] = DD[0][2][2];
    luh[40] = DD[0][2][2];
    luh[41] = DD[1][0][0];
    luh[42] = DD[1][0][1];
    luh[43] = DD[1][0][2];
    luh[44] = DD[1][1][1];
    luh[45] = DD[1][1][2];
    luh[46] = DD[1][2][2];
    luh[47] = DD[2][0][0];
    luh[48] = DD[2][0][1];
    luh[49] = DD[2][0][2];
    luh[50] = DD[2][1][1];
    luh[51] = DD[2][1][2];
    luh[52] = DD[2][2][2];            

}


int main()
{
  double       Qwork[59] = {2.03876392436862219348e+00,1.13327632951146378931e-17,1.13328125850752231240e-17,9.81163922513405450943e-01,7.28991960382758263436e-20,9.81163922513405450943e-01,1.60702820377219834924e-01,-2.51854521837995827255e-14,-2.51859943549822510890e-14,-7.58958825491163335819e-02,-1.66695209611466999131e-16,-7.58958825491163335819e-02,5.73443499779581738335e-04,3.01713236980058585601e-01,-5.73062863551328161271e-12,-5.73061639353499262517e-12,2.85203957292370774423e-02,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,2.33452764998758000026e-01,-4.17807322717328905611e-12,-4.17806121758503744557e-12,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,1.66029261165760388952e-01,3.52110122269561003271e-16,3.52110623323521089469e-16,-7.84114259822868420180e-02,-1.00892874234056400197e-18,-7.84114259822868420180e-02,-2.87874071850877923045e-12,-3.11299149429065573305e-16,4.67768108082361629111e-18,1.35940313205684060638e-12,-2.07569443609550208564e-18,1.35970991086859628736e-12,-2.87874063909529684826e-12,1.43318865709343599115e-18,-3.14548568405474184678e-16,1.35970993559255365097e-12,-2.04322863271445272127e-18,1.35940303232291987362e-12,2.34302828568053289615e-01,-9.50679857641236088217e-03,-7.99171325660463643947e-02,1.44427998332769005893e-12,1.44427998345849223420e-12,0.00000000000000000000e+00};
  const double Qtest[59] = {2.03876392436862219348e+00,1.13327632951146378931e-17,1.13328125850752231240e-17,9.81163922513405450943e-01,7.28991960382758263436e-20,9.81163922513405450943e-01,1.60702820377219834924e-01,-2.51854521837995827255e-14,-2.51859943549822510890e-14,-7.58958825491163335819e-02,-1.66695209611466999131e-16,-7.58958825491163335819e-02,5.73443499779581738335e-04,3.01713236980058585601e-01,-5.73062863551328161271e-12,-5.73061639353499262517e-12,2.85203957292370774423e-02,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,2.33452764998758000026e-01,-4.17807322717328905611e-12,-4.17806121758503744557e-12,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,0.00000000000000000000e+00,1.66029261165760388952e-01,3.52110122269561003271e-16,3.52110623323521089469e-16,-7.84114259822868420180e-02,-1.00892874234056400197e-18,-7.84114259822868420180e-02,-2.87874071850877923045e-12,-3.11299149429065573305e-16,4.67768108082361629111e-18,1.35940313205684060638e-12,-2.07569443609550208564e-18,1.35970991086859628736e-12,-2.87874063909529684826e-12,1.43318865709343599115e-18,-3.14548568405474184678e-16,1.35970993559255365097e-12,-2.04322863271445272127e-18,1.35940303232291987362e-12,2.34302828568053289615e-01,-9.50679857641236088217e-03,-7.99171325660463643947e-02,1.44427998332769005893e-12,1.44427998345849223420e-12,0.00000000000000000000e+00};


  enforce(Qwork); 

  double bla = 0;
  for (int i=0;i<59;i++) bla+=(Qwork[i]-Qtest[i]);

  for (int i=0;i<59;i++) printf("\t%d\t%.30f\n", i+1, Qwork[i]-Qtest[i]);
  printf("%e\n", bla);
  return 0;
}

